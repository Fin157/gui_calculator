import tkinter as tk
from tkinter import ttk
import calculator

calc = calculator.Calculator()
root = tk.Tk()
root.title("Kalkulačka")
root.geometry("720x480")

mainframe = ttk.Frame(root, padding="3 3 12 12")
mainframe.grid(column=0, row=0, sticky=(tk.N, tk.W, tk.E, tk.S))
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)

# Initialize the label displaying the current expression (the calculator's "screen")
current_expr = tk.StringVar()
current_expr_label = ttk.Label(mainframe, textvariable=current_expr, anchor="e", font=("Arial", 20)).grid(column=0, row=0, columnspan=4, sticky=(tk.W, tk.E))

zero_button = ttk.Button(mainframe, text="0", command=lambda: calc.append_to(current_expr, "0")).grid(column=0, row=5)
one_button = ttk.Button(mainframe, text="1", command=lambda: calc.append_to(current_expr, "1")).grid(column=0, row=4)
two_button = ttk.Button(mainframe, text="2", command=lambda: calc.append_to(current_expr, "2")).grid(column=1, row=4)
three_button = ttk.Button(mainframe, text="3", command=lambda: calc.append_to(current_expr, "3")).grid(column=2, row=4)
four_button = ttk.Button(mainframe, text="4", command=lambda: calc.append_to(current_expr, "4")).grid(column=0, row=3)
five_button = ttk.Button(mainframe, text="5", command=lambda: calc.append_to(current_expr, "5")).grid(column=1, row=3)
six_button = ttk.Button(mainframe, text="6", command=lambda: calc.append_to(current_expr, "6")).grid(column=2, row=3)
seven_button = ttk.Button(mainframe, text="7", command=lambda: calc.append_to(current_expr, "7")).grid(column=0, row=2)
eight_button = ttk.Button(mainframe, text="8", command=lambda: calc.append_to(current_expr, "8")).grid(column=1, row=2)
nine_button = ttk.Button(mainframe, text="9", command=lambda: calc.append_to(current_expr, "9")).grid(column=2, row=2)
decimal_point_button = ttk.Button(mainframe, text=",", command=lambda: calc.append_to(current_expr, ",")).grid(column=1, row=5)
plus_button = ttk.Button(mainframe, text="+", command=lambda: calc.append_to(current_expr, "+")).grid(column=3, row=2)
minus_button = ttk.Button(mainframe, text="-", command=lambda: calc.append_to(current_expr, "-")).grid(column=3, row=3)
multiply_button = ttk.Button(mainframe, text="×", command=lambda: calc.append_to(current_expr, "×")).grid(column=3, row=4)
divide_button = ttk.Button(mainframe, text=":", command=lambda: calc.append_to(current_expr, ":")).grid(column=3, row=5)
backspace_button = ttk.Button(mainframe, text="<X", command=lambda: calc.remove_last_char(current_expr)).grid(column=3, row=1)
ce_button = ttk.Button(mainframe, text="CE", command=lambda: calc.clear_expression(current_expr)).grid(column=2, row=1)
equals_button = ttk.Button(mainframe, text="=", command=lambda: calc.calculate(current_expr)).grid(column=2, row=5)
lparen_button = ttk.Button(mainframe, text="(", command=lambda: calc.append_to(current_expr, "(")).grid(column=0, row=1)
rparen_button = ttk.Button(mainframe, text=")", command=lambda: calc.append_to(current_expr, ")")).grid(column=1, row=1)

# Create all keybinds to allow for keyboard control as well
root.bind("0", lambda x: calc.append_to(current_expr, "0"))
root.bind("1", lambda x: calc.append_to(current_expr, "1"))
root.bind("2", lambda x: calc.append_to(current_expr, "2"))
root.bind("3", lambda x: calc.append_to(current_expr, "3"))
root.bind("4", lambda x: calc.append_to(current_expr, "4"))
root.bind("5", lambda x: calc.append_to(current_expr, "5"))
root.bind("6", lambda x: calc.append_to(current_expr, "6"))
root.bind("7", lambda x: calc.append_to(current_expr, "7"))
root.bind("8", lambda x: calc.append_to(current_expr, "8"))
root.bind("9", lambda x: calc.append_to(current_expr, "9"))
root.bind("(", lambda x: calc.append_to(current_expr, "("))
root.bind(")", lambda x: calc.append_to(current_expr, ")"))
root.bind("+", lambda x: calc.append_to(current_expr, "+"))
root.bind("-", lambda x: calc.append_to(current_expr, "-"))
root.bind("*", lambda x: calc.append_to(current_expr, "×"))
root.bind("/", lambda x: calc.append_to(current_expr, ":"))
root.bind(",", lambda x: calc.append_to(current_expr, "."))
root.bind("<BackSpace>", lambda x: calc.remove_last_char(current_expr))
root.bind("<Delete>", lambda x: calc.clear_expression(current_expr))
root.bind("<Return>", lambda x: calc.calculate(current_expr))

root.mainloop()